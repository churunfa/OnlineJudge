/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2020-06-16 03:17:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.code;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import OnlineJudge.dao.impl.ProblemDaoImpl;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import OnlineJudge.domain.Problem;
import java.util.Date;
import OnlineJudge.domain.User_password;
import OnlineJudge.dao.impl.StatusDaoImpl;
import OnlineJudge.dao.impl.QueueDaoImpl;
import OnlineJudge.domain.Standard_code;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

    ProblemDaoImpl problemDao = new ProblemDaoImpl();
    QueueDaoImpl queueDao = new QueueDaoImpl();


    String solution_id = request.getParameter("id");
    String pid = request.getParameter("pid");
    User_password user = (User_password) request.getSession().getAttribute("User");

    if(pid == null && solution_id == null){
        request.getRequestDispatcher(request.getContextPath()+"/error").forward(request,response);
        return;
    }

    String code="";
    String language = "";
    boolean flag = false;
    if(pid != null){
        flag = true;
        Problem problem = problemDao.findProblemByPid(Integer.parseInt(pid));
        if(problem == null){
            request.getRequestDispatcher(request.getContextPath()+"/error").forward(request,response);
            return;
        }


        if(!problem.isIs_show()){
            if(user == null){
                request.getRequestDispatcher(request.getContextPath()+"/error").forward(request,response);
                return;
            }
            if(!"root".equals(user.getPower()) && user.getId() != problem.getMaster()){
                request.getRequestDispatcher(request.getContextPath()+"/error").forward(request,response);
                return;
            }
        }
        request.setAttribute("pro",problem);
        Standard_code standard_code = problemDao.getStandard_code(Integer.parseInt(pid));
        if(standard_code == null) code = "";
        else{
            code = standard_code.getCode();
            language = standard_code.getLanguage();
        }
    }else{
        int pid1 = queueDao.findPid(Integer.parseInt(solution_id));
        if(pid1 == 0){
            request.getRequestDispatcher(request.getContextPath()+"/error").forward(request,response);
            return;
        }
        Problem problemByPid = problemDao.findProblemByPid(pid1);
        if(problemByPid == null){
            request.getRequestDispatcher(request.getContextPath()+"/error").forward(request,response);
            return;
        }

        if(!problemByPid.isIs_show()){
            if(user == null){
                request.getRequestDispatcher(request.getContextPath()+"/error").forward(request,response);
                return;
            }
            if(!"root".equals(user.getPower()) && user.getId() != problemByPid.getMaster()){
                request.getRequestDispatcher(request.getContextPath()+"/error").forward(request,response);
                return;
            }
        }

        code = queueDao.findSolutionCode(Integer.parseInt(solution_id));
        if(code == null) code = "";
        request.setAttribute("pro",problemByPid);
    }
    request.setAttribute("code",code);
    request.setAttribute("language",language);
    request.setAttribute("flag",flag);

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\" style=\"min-height: 100%;min-width: 800px\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"utf-8\">\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("    <title>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pro.title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</title>\n");
      out.write("    <!-- Bootstrap -->\n");
      out.write("    <link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->\n");
      out.write("    <script src=\"../js/jquery-1.11.0.min.js\"></script>\n");
      out.write("    <!-- Include all compiled plugins (below), or include individual files as needed -->\n");
      out.write("    <script src=\"../js/bootstrap.min.js\"></script>\n");
      out.write("    <!--导入布局js，共享header和footer-->\n");
      out.write("    <script type=\"text/javascript\" src=\"./js/code.js\"></script>\n");
      out.write("    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n");
      out.write("    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n");
      out.write("    <!--[if lt IE 9]>\n");
      out.write("    <script src=\"https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js\"></script>\n");
      out.write("    <script src=\"https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js\"></script>\n");
      out.write("    <![endif]-->\n");
      out.write("    <link rel=\"icon\" type=\"image/png\" sizes=\"144x144\" href=\"../imgs/logo_blue_144.png\"/>\n");
      out.write("    <script src=\"../js/showdown.min.js\"></script>\n");
      out.write("    <script src=\"https://cdn.bootcss.com/ace/1.4.6/ace.js\"></script>\n");
      out.write("    <script src=\"https://cdn.bootcss.com/ace/1.4.6/ext-beautify.js\"></script>\n");
      out.write("    <script src=\"https://cdn.bootcss.com/ace/1.4.6/ext-language_tools.js\"></script>\n");
      out.write("    <script src=\"https://cdn.bootcss.com/ace/1.4.6/mode-javascript.js\"></script>\n");
      out.write("    <script src=\"https://cdn.bootcss.com/ace/1.4.6/theme-xcode.js\"></script>\n");
      out.write("    <script src=\"http://cdn.bootcss.com/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n");
      out.write("    <script type=\"text/x-mathjax-config\">\n");
      out.write("    MathJax.Hub.Config({\n");
      out.write("        tex2jax: {inlineMath: [['$', '$']]},\n");
      out.write("        messageStyle: \"none\"\n");
      out.write("    });\n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("<body style=\"padding-top: 60px;\n");
      out.write("    min-height: 100%;\n");
      out.write("    min-width: 800px;\n");
      out.write("    background-image: linear-gradient(#E0E0E0, #D8BFD8);\"  hidden>\n");
      out.write("    <div id=\"header\"></div>\n");
      out.write("    <div class=\"container\" style=\"min-height: 500px;padding-top: 30px\">\n");
      out.write("        ");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("        <div id=\"code\"></div>\n");
      out.write("    </div>\n");
      out.write("    <textarea hidden id=\"get_code\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</textarea>\n");
      out.write("<div id=\"footer\"></div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fif_005f0.setParent(null);
    // /code/index.jsp(136,8) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${flag}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
    if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("            <p>");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${language}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("标程：</p>\n");
        out.write("        ");
        int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
    return false;
  }
}

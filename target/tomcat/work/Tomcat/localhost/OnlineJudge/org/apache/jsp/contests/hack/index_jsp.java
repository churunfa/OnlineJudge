/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2020-07-05 13:21:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.contests.hack;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import OnlineJudge.dao.impl.ProblemDaoImpl;
import java.io.File;
import OnlineJudge.util.ReadFileData;
import java.util.regex.Pattern;
import OnlineJudge.domain.Problem;
import java.util.regex.Matcher;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

    String pid = request.getParameter("pid");
    if(pid == null){
        request.getRequestDispatcher(request.getContextPath()+"/error").forward(request,response);
        return;
    }

    ProblemDaoImpl problemDao = new ProblemDaoImpl();

    Problem pro = problemDao.findProblemByPid(Integer.parseInt(pid));
    if(pro == null){
        request.getRequestDispatcher(request.getContextPath()+"/error").forward(request,response);
        return;
    }

    String dataPath = application.getRealPath("/data")+"/"+pro.getPid();

    Pattern p_in = Pattern.compile("hack-.*\\.in");
    Pattern p_out = Pattern.compile("hack-.*\\.out");

    File file = new File(dataPath);
    File[] datas = file.listFiles();

    int sum_in=0,sum_out=0;
    if(datas != null){
        for(File data:datas){
            String name = data.getName();

            Matcher m_in = p_in.matcher(name);
            Matcher m_out = p_out.matcher(name);
            if(m_in.find()) sum_in++;
            if(m_out.find()) sum_out++;
        }
    }

    request.setAttribute("pid",pid);
    request.setAttribute("sum",Math.min(sum_in,sum_out));

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\" style=\"min-height: 100%;min-width: 800px\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"utf-8\">\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("    <title>hack</title>\n");
      out.write("    <!-- Bootstrap -->\n");
      out.write("    <link href=\"../../css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->\n");
      out.write("    <script src=\"../../js/jquery-1.11.0.min.js\"></script>\n");
      out.write("    <!-- Include all compiled plugins (below), or include individual files as needed -->\n");
      out.write("    <script src=\"../../js/bootstrap.min.js\"></script>\n");
      out.write("    <!--导入布局js，共享header和footer-->\n");
      out.write("    <script type=\"text/javascript\" src=\"./js/hack.js\"></script>\n");
      out.write("    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n");
      out.write("    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n");
      out.write("    <!--[if lt IE 9]>\n");
      out.write("    <script src=\"https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js\"></script>\n");
      out.write("    <script src=\"https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js\"></script>\n");
      out.write("    <![endif]-->\n");
      out.write("    <link rel=\"stylesheet\" href=\"./css/hack.css\">\n");
      out.write("    <link rel=\"icon\" type=\"image/png\" sizes=\"144x144\" href=\"../../imgs/logo_blue_144.png\"/>\n");
      out.write("    <script src=\"http://cdn.bootcss.com/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n");
      out.write("    <script type=\"text/x-mathjax-config\">\n");
      out.write("    MathJax.Hub.Config({\n");
      out.write("        tex2jax: {inlineMath: [['$', '$']]},\n");
      out.write("        messageStyle: \"none\"\n");
      out.write("    });\n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("<body style=\"padding-top: 60px;\n");
      out.write("    min-height: 100%;\n");
      out.write("    min-width: 800px;\n");
      out.write("    background-image: linear-gradient(#E0E0E0, #D8BFD8);\"  hidden>\n");
      out.write("<div id=\"header\"></div>\n");
      out.write("<div hidden id=\"pid\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pid}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</div>\n");
      out.write("<div hidden id=\"path\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</div>\n");
      out.write("<div class=\"container main\">\n");
      out.write("    <div class=\"div-css\" id=\"simple-data\">\n");
      out.write("\n");
      out.write("        <div class=\"jumbotron\">\n");
      out.write("            <h2>您可以在这里提交hack数据hack其他人的代码</h2>\n");
      out.write("            <p>1.您提交的测试数据会通过标程进行测试，因此请为务必保证您的输出数据根标程的输出一模一样（包括空格和换行）</p>\n");
      out.write("            <p>2.因为需要通过标程对hank代码进行测试，所以数据提交过程可能较慢，请耐心等待</p>\n");
      out.write("            <p>3.hack数据一旦上传就不可撤销，上传之前请务必保证您的测试数据符合题目规定的数据范围</p>\n");
      out.write("            <p>4.比赛结束12小时后会将hack数据加入测试数据，并将所有代码重新进行重测</p>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <h4 style=\"text-align: left;margin-bottom: 20px;margin-left: 20px\">添加hack数据：\n");
      out.write("            <button class=\"btn btn-default glyphicon glyphicon-plus\" style=\"font-size: 8px;margin-top: -5px\" type=\"submit\" id=\"add_data\"></button>\n");
      out.write("            <span>此题以累积提交<span id=\"sum\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</span>组hack数据</span>\n");
      out.write("        </h4>\n");
      out.write("\n");
      out.write("    </div>\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("    <button style=\"margin-left: 50%;margin-top: 70px\" type=\"button\" id=\"submit\" data-loading-text=\"提交中...\" class=\"btn btn-default\" autocomplete=\"off\">\n");
      out.write("        提交\n");
      out.write("    </button>\n");
      out.write("</div>\n");
      out.write("<div id=\"footer\"></div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
